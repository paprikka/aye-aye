{"version":3,"file":"content.js","sources":["../src/content.ts"],"sourcesContent":[";(async () => {\n    const make = () => {\n        const frame = document.createElement('iframe')\n        frame.classList.add(`ayeaye__frame`)\n        frame.src = chrome.runtime.getURL('preview.html')\n\n        const dialogElement = document.createElement('dialog')\n        dialogElement.classList.add('ayeaye__dialog')\n\n        dialogElement.appendChild(frame)\n        document.body.appendChild(dialogElement)\n\n        const onPreviewMessage = (event: MessageEvent) => {\n            console.log({ event })\n            if (event.data === 'ayeaye::quit') {\n                api.dispose()\n            }\n            if (event.data === 'ayeaye::ready') {\n                const html = document.querySelector('body')!.innerHTML\n                frame.contentWindow!.postMessage(\n                    {\n                        htmlContent: html,\n                        baseURL: window.location.href,\n                    },\n                    '*'\n                )\n            }\n        }\n\n        const api = {\n            show: () => {\n                window.addEventListener('message', onPreviewMessage)\n                dialogElement.showModal()\n            },\n            hide: () => {\n                dialogElement.close()\n            },\n            dispose: () => {\n                // we could use {once: true} in addEventListener, but this way we can\n                // support lifereload when testing the page without setting up an entire\n                // test env.\n                window.removeEventListener('message', onPreviewMessage)\n                api.hide()\n                dialogElement.remove()\n            },\n        }\n\n        return api\n    }\n\n    if ('ayeaye' in window) {\n        ;(window as any).ayeaye.dispose()\n    }\n\n    ;(window as any).ayeaye = make()\n    ;(window as any).ayeaye.show()\n})()\n"],"names":["make","frame","document","createElement","classList","add","src","chrome","runtime","getURL","dialogElement","appendChild","body","onPreviewMessage","event","console","log","data","api","dispose","html","querySelector","innerHTML","contentWindow","postMessage","htmlContent","baseURL","window","location","href","show","addEventListener","showModal","hide","close","removeEventListener","remove","ayeaye"],"mappings":"CAAE,SAAY,CACV,MAAMA,EAAOA,IAAM,CACTC,MAAAA,EAAQC,SAASC,cAAc,QAAQ,EACvCC,EAAAA,UAAUC,IAAK,eAAc,EACnCJ,EAAMK,IAAMC,OAAOC,QAAQC,OAAO,cAAc,EAE1CC,MAAAA,EAAgBR,SAASC,cAAc,QAAQ,EACvCC,EAAAA,UAAUC,IAAI,gBAAgB,EAE5CK,EAAcC,YAAYV,CAAK,EACtBW,SAAAA,KAAKD,YAAYD,CAAa,EAEjCG,MAAAA,EAAoBC,GAAwB,CAK1CA,GAJJC,QAAQC,IAAI,CAAEF,MAAAA,CAAAA,CAAO,EACjBA,EAAMG,OAAS,gBACfC,EAAIC,QAAQ,EAEZL,EAAMG,OAAS,gBAAiB,CAChC,MAAMG,EAAOlB,SAASmB,cAAc,MAAM,EAAGC,UAC7CrB,EAAMsB,cAAeC,YACjB,CACIC,YAAaL,EACbM,QAASC,OAAOC,SAASC,MAE7B,GACJ,EACJ,EAGEX,EAAM,CACRY,KAAMA,IAAM,CACDC,OAAAA,iBAAiB,UAAWlB,CAAgB,EACnDH,EAAcsB,UAAU,CAC5B,EACAC,KAAMA,IAAM,CACRvB,EAAcwB,MAAM,CACxB,EACAf,QAASA,IAAM,CAIJgB,OAAAA,oBAAoB,UAAWtB,CAAgB,EACtDK,EAAIe,KAAK,EACTvB,EAAc0B,OAAO,CACzB,CAAA,EAGGlB,OAAAA,CAAAA,EAGP,WAAYS,QACVA,OAAeU,OAAOlB,UAG1BQ,OAAeU,OAASrC,IACxB2B,OAAeU,OAAOP,MAC5B,GAAG"}